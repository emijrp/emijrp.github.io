{{headernoindex|1=TAI 2018. Bloque III. Desarrollo de sistemas}}
{{oposiciones}}

El '''Bloque III. Desarrollo de sistemas''' de las [[oposiciones|Oposiciones a TAI 2018]] se compone de '''10 temas'''.

== Comparativa con el programa de TAI 2017 ==

* Tema 1-5: Igual.
* Tema 6: Dejan de nombrar C y C++.
* Tema 7: Igual.
* Tema 8: Cambian "Desarrollo web front-end y en servidor" por "Desarrollo web front-end y en servidor, multiplataforma y multidispositivo".
* Tema 9: Añaden "Conceptos de seguridad en el desarrollo de los sistemas".
* Tema 10: Añaden "Metodologías de desarrollo. Pruebas". 

En esta página solo tomaré apuntes de lo que haya cambiado. Para lo demás me sirven los apuntes de [[tai2017-bloque3|TAI 2017 Bloque III]].

== Tema 8 ==

{{recuadro|1='''Tema 8.''' Aplicaciones web. '''Desarrollo web front-end y en servidor, multiplataforma y multidispositivo'''. Lenguajes: HTML, XML y sus derivaciones. Navegadores y lenguajes de programación web. Lenguajes de script.}}

* Desarrollo web front-end y en servidor, multiplataforma y multidispositivo

''Por desarrollar.''

== Tema 9 ==

{{recuadro|1='''Tema 9.''' Accesibilidad, diseño universal y usabilidad. Acceso y usabilidad de las tecnologías, productos y servicios relacionados con la sociedad de la información. Confidencialidad y disponibilidad de la información en puestos de usuario final. '''Conceptos de seguridad en el desarrollo de los sistemas'''.}}

* Conceptos de seguridad en el desarrollo de los sistemas

''Por desarrollar.''

== Tema 10 ==

{{recuadro|1='''Tema 10.''' Herramientas CASE: características. Repositorios: estructura y actualización. Generación de código y documentación. '''Metodologías de desarrollo. Pruebas'''. Programas para control de versiones. Plataformas de desarrollo colaborativo de software.}}

* Metodologías de desarrollo. Pruebas

''Por desarrollar.''

<!--

https://es.wikipedia.org/wiki/Metodolog%C3%ADa_de_desarrollo_de_software

Metodologías:
Scrum
Rational Unified Process RUP
Extreme Programming XP


Enfoques:
Modelo en cascada
Prototipado
Incremental
Espiral
RAD


La integración continua (continuous integration en inglés) es un modelo informático propuesto inicialmente por Martin Fowler que consiste en hacer integraciones automáticas de un proyecto lo más a menudo posible para así poder detectar fallos cuanto antes. Entendemos por integración la compilación y ejecución de pruebas de todo un proyecto.

El proceso suele ser: cada cierto tiempo (horas), descargarse las fuentes desde el control de versiones (por ejemplo CVS, Git, Subversion, Mercurial o Microsoft Visual SourceSafe) compilarlo, ejecutar pruebas y generar informes.

Para esto suelen utilizarse aplicaciones como Solano CI, Bamboo, Pipeline, Apache Continuum, Hudson, Jenkins, GoCD, CruiseControl o Anthill (para proyectos Java) o CruiseControl.Net, Team Foundation Build para .Net, que se encargan de controlar las ejecuciones, apoyadas en otras herramientas como Ant o Maven (también para proyectos Java), o Nant o MSBUILD (para .Net) que se encargan de realizar las compilaciones, ejecutar las pruebas y realizar los informes.

A menudo la integración continua está asociada con las metodologías de programación extrema y desarrollo ágil.

-->

== Fuentes ==

* Para confeccionar estos apuntes se han utilizado en ocasiones artículos de [https://www.wikipedia.org Wikipedia].

== Referencias ==
{{reflist}}
{{reflist-end}}

{{oposiciones}}
{{footer}}
