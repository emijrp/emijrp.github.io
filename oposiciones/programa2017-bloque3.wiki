{{header|1=Bloque III. Desarrollo de sistemas}}

== Tema 1: Modelo conceptual de datos ==

{{recuadro|1='''Modelo conceptual de datos'''. Entidades, atributos y relaciones. Reglas de modelización. Diagramas de flujo de datos. Reglas de construcción. Descomposición en niveles. Flujogramas.}}

El '''modelo entidad-relación''' ideado por Peter Chen en 1976 es el más frecuente para el diseño conceptual de bases de datos.

Los elementos básicos de un diagrama entidad-relación son las entidades, las relaciones y los atributos. Las entidades cuentan con atributos y ellas se relacionan entre sí.

* '''Entidad''': representan objetos del mundo real independientes entre sí. Cuentan con atributos (propiedades). Se representan con rectángulos con el nombre de la entidad dentro. Ejemplos: una persona, una ciudad, un coche.

* '''Atributos''': son las propiedades o particularidades de una entidad. Se representan con círculos con el nombre del atributo dentro. Ejemplos: Una persona puede tener de atributos su nombre, fecha de nacimiento, DNI, etc. Los atributos identificativos son aquellos que diferencian claramente a un objeto de otro, por ejemplo para personas se suele usar el DNI.

* '''Relación''': describe la dependencia entre entidades y cómo se asocian entre ellas. Se representan con rombos con el nombre de la relación dentro. Si la relación es entre dos entidades, se llama binaria. Ejemplo: una entidad persona se relaciona con una entidad ciudad a través de la relación Persona - "nacido en N:1" - Ciudad. Como una persona solo puede nacer en 1 ciudad, la relación es N:1, ya que en una ciudad pueden nacer N personas. Las cardinalidades pueden ser 1:1 (uno a uno), 1:N (uno a varios), N:1 (varios a uno), N:M (varios varios). Las relaciones también pueden tener atributos como las entidades, un caso frecuente son aquellas relaciones con fecha u hora.

== Tema 2: Diseño de bases de datos ==

{{recuadro|1='''Diseño de bases de datos'''. Diseño lógico y físico. El modelo lógico relacional. Normalización.}}

== Tema 3: Lenguajes de programación ==

{{recuadro|1='''Lenguajes de programación'''. Representación de tipos de datos. Operadores. Instrucciones condicionales. Bucles y recursividad. Procedimientos, funciones y parámetros. Vectores y registros. Estructura de un programa.}}

=== Paradigmas ===

Los '''paradigmas de programación''' son formas de clasificar los lenguajes de programación en base a las características de su estructura, control de flujo y elementos. Un mismo lenguaje puede pertenecer a varios paradigmas.

* '''Imperativo''': es el más extendido. Consiste en dar instrucciones al ordenador, en forma de algoritmos, sobre cómo hacer las cosas. Ejemplos: lenguaje máquina, C, BASIC, Pascal.
** '''Orientado a objetos''': basado en el imperativo pero encapsula variables y funciones en entidades llamadas objetos. Ejemplos: C++, C#, Java, Python, Smalltalk.
** '''Procedural''': agrupa el código en funciones. Ejemplos: Fortran, ALGOL, COBOL, BASIC, C.

* '''Declarativo''': describen la lógica pero sin expresar el control de flujo. Ejemplos: Lisp, Haskell, ML, Prolog, Curry.
** '''Funcional''': se basa en el uso de funciones matemáticas en vez de en la mutación de variables (imperativa). Ejemplos: Haskell, Erlang.
** '''Lógico''': basado en la lógica formal, expresando hechos y reglas sobre el dominio del problema a resolver. Ejemplos: Prolog, Datalog.
** '''Algebraicos''': Ejemplos: Maude, SQL.

* '''Simbólico''': permite manipular sus propias fórmulas y componentes como si fueran datos. Ejemplos: Wolfram, Lisp, Prolog.

* '''Concurrente''':
* '''Distribuida''':
* '''Paralela''':

=== Estructuras ===

Una '''instrucción condicional''' es aquella que tras ser evaluada determina qué fragmento de código se ejecutará. Puede ser un '''if''' simple (solo un caso, la evaluación afirmativa), un '''if-else''' (con código tanto para la evaluación afirmativa como negativa de la condición) o un '''switch/select-case''' (múltiples casos).

Un '''bucle''' es una sentencia que ejecuta repetidas veces un trozo de código, hasta que la condición asignada a dicho bucle deja de cumplirse. Los tres bucles más utilizados en programación son el bucle '''while''', el bucle '''for''' y el bucle '''do-while'''.

Un '''algoritmo recursivo''' es un algoritmo que expresa la solución de un problema en términos de una llamada a sí mismo. La llamada a sí mismo se conoce como llamada recursiva o recurrente.

Un '''procedimiento''' es una subrutina dentro de un programa que resuelve una tarea específica. Una '''función''' es aquella subrutina que devuelve un valor. Los '''parámetros''' son aquellas variables que se le pasan a los procedimientos o funciones para que sean utilizados en la resolución de la tarea.

=== Lenguajes ===

Algunos '''lenguajes de programación''' y una breve reseña sobre ellos. Algunos no son estrictamente lenguajes de programación (como HTML, CSS, XML) pero se incluyen por ser de interés:

* '''ALGOL''': familia de lenguajes imperativos cuya primera versión ALGOL 58 apareció en 1958. Fue el que más influyó a lenguajes posteriores en cuanto a sintaxis de entre sus contemporáneos de alto nivel (FORTRAN, Lisp y COBOL).
* '''AWK''': lenguaje para procesado de texto y extracción de datos. Creado en Bell Labs en los años 70.
* '''Batch''': un script batch es un fichero en texto plano que incluye comandos para ser ejecutados por el intérprete de comandos. Su extensión suele ser .bat, .cmd o .btm.
* '''Bash''': escrito por Brian Fox para el Proyecto GNU. Primera versión en 1989.
* '''BASIC''': familia de lenguajes de alto nivel y de propósito general con la finalidad de ser fáciles de usar. Primera versión en 1964.
* '''C''': lenguaje imperativo de propósito general, estructurado y con capacidad de recursión, de tipado estático. Desarrollado por Dennis Ritchie en los Laboratorios Bell entre 1969 y 1972. Proviene del lenguaje B.
* '''C++''': imperativo, orientado a objetos, de propósito general. Creado por Bjarne Stroustrup en 1985.
* '''C#''': lenguaje multiparadigma, desarrollado por Microsoft en 2000.
* '''COBOL''': lenguaje imperativo y procedural. Enfocado a finanzas y negocios. Creado en 1959.
* '''CSS''': lenguaje de hojas de estilo para describir cómo se presenta un documento escrito en un lenguaje de marcado. Aunque en su mayoría se utiliza para el diseño de páginas web HTML/XHTML, también sirve para documentos XML, SVG y XUL.
* '''Eiffel''': lenguaje orientado a objetos, diseñado por Bertrand Meyer, publicado en 1986. Conceptos introducidos por Eiffel fueron incorporados más tarde a Java y C#.
* '''Erlang''': lenguaje de propósito general concurrente y funcional, con recolector de basura. Diseñado en 1986 por Ericsson, liberado en 1998.
* '''Ensamblador''': lenguaje de bajo nivel, imperativo, no estructurado. Específico de cada arquitectura de computador. El código ensamblador se convierte en ejecutable con un programa llamado a su vez ensamblador. 
* '''FORTRAN''': lenguaje de propósito general, imperativo, enfocado a computación numérica y científica. Desarrollado originalmente por IBM en los años 50. Significa Formula Translation.
* '''Go''': lenguaje imperativo, concurrente, compilado, creado por Google en 2009.
* '''Haskell''': lenguaje de propósito general, funcional, con tipado fuerte.
* '''HTML''': lenguaje de marcado para crear páginas web y aplicaciones web. Junto con CSS y Javascript suponen los tres lenguajes básicos de la World Wide Web. Los navegadores web reciben los documentos HTML desde un servidor web o almacenados localmente y los renderizan. El HTML permite embeber programas escritos en Javascript o a través de applets.
* '''Java''': lenguaje de propósito general, concurrente, orientado a objetos, diseñado para ser compilado una sola vez (bytecode) y ejecutado en cualquier plataforma que soporte la máquina Java. Empleado mayoritariamente para aplicaciones cliente-servidor. Creado por James Gosling en 1995 en Sun Microsystems (luego adquirida por Oracle). Sintaxis derivada de C y C++.
* '''JavaScript''': lenguaje de alto nivel, interpretado, multiparadigma, de tipado débil. Se utiliza para hacer dinámicas las páginas web, aunque ahora también se utiliza para aplicaciones de escritorio, en software PDF, procesadores de texto, etc.
* '''KML''': Keyhole Markup Language, notación XML para expresar información geográfica para ser visualizada en mapas y 3D en navegadores.
* '''LaTeX''': lenguaje de marcado para la redacción de documentos. Creado en 1985 por Leslie Lamport. Permite definir la estructura del documento, el estilo del texto, añadir citas y referencias, etc.
* '''Lisp''': lenguaje funcional, procedural, creado en 1958. Es el segundo lenguaje de alto nivel más antiguo, por detrás de FORTRAN. Existen varios dialectos, entre ellos Common Lisp y Scheme. Utilizado en inteligencia artificial.
* '''Lua''': imperativo, estructurado y bastante ligero que fue diseñado como un lenguaje interpretado con una semántica extendible.
* '''make''': lenguaje para compilar y enlazar código fuente, generando código objeto.
* '''Modula''': descendiente de Pascal, creado por el autor de éste. Soporta módulos.
* '''Occam''': lenguaje concurrente, imperativo.
* '''Pascal''': lenguaje imperativo y procedural, diseñado por Niklaus Wirth y publicado en 1970. Creado para fomentar buenas prácticas de programación mediante el uso de programación estructurada y estructuras de datos. Existe el Object Pascal orientado a objetos.
* '''Perl''': lenguaje de alto nivel, propósito general, interpretado.
* '''PHP''': lenguaje del lado del servidor para desarrollo web y propósito general. Creado por Rasmus Lerdof en 1994. Puede embeberse dentro del HTML.
* '''Prolog''': lenguaje lógico de propósito general, enfocado a la inteligencia artificial y lingüística computacional. Creado en los años 70 por Alain Colmerauer.
* '''Python''': lenguaje interpretado, multiparadigma, de alto nivel y propósito general. Creado por Guido van Rossum en 1990. Con tipos dinámicos y control de memoria automático.
* '''R''': lenguaje para estadística y gráficas. Creado en 1993.
* '''Ruby''': lenguaje orientado a objetos, de propósito general, multiparadigma. Creado por Yukihiro Matsumoto en 1995.
* '''Scala''': lenguaje de propósito general, funcional, diseñado para corregir algunas críticas de Java. Creado en 2004 por Martin Odersky.
* '''Smalltalk''': lenguaje orientado a objetos, creado en parte con fines educativos por programadores de Xrox PARC en los años 70.
* '''SVG''': Scalable Vector Graphics es un formato gráfico basado en XML con soporte para animación.
* '''Visual Basic''': lenguaje dirigido por eventos, publicado en 1991 por Microsoft. Derivado de BASIC, permite crear aplicaciones con interfaz gráfica rápidamente.
* '''Visual Basic .NET''': lenguaje orientado a objetos, multiparadigma, lanzado en 2002 por Microsoft. Sucesor de Visual Basic.
* '''XML''': Extensible Markup Language, lenguaje de marcado para definir reglas para codificar documentos en un formato que sea entendible por humanos y máquinas.
* '''XUL''': XML User Interface Language es un lenguage de marcas para interfaces de usuario desarrollado por Mozilla. Permite crear interfaces gráficas de usuario de forma similar a una página web.

== Tema 4: Lenguajes de interrogación de bases de datos ==

{{recuadro|1='''Lenguajes de interrogación de bases de datos'''. Estándar ANSI SQL. Procedimientos almacenados. Eventos y disparadores.}}

=== ANSI SQL ===

'''SQL''' (Structured Query Language o Lenguaje de Consulta Estructurada) es un lenguaje estandarizado con el que acceder a un sistema de gestión de bases de datos relaciones y realizar operaciones.

SQL consiste en un lenguaje de '''definición''' de datos, un lenguaje de '''manipulación''' de datos y un lenguaje de '''control''' de datos.

* '''Lenguaje de definición de datos (DDL)''': son las órdenes que permiten crear, modificar y eliminar las tablas, vistas, procedimientos, triggers y hasta las propias bases de datos.
** '''CREATE''': permite crear bases de datos, tablas, vistas y procedimientos. Ejemplo: CREATE TABLE 'CLIENTES';
** '''ALTER''': permite modificar una tabla, quitando o agregando campos, cambio de tipos, índices, triggers. Ejemplo: ALTER TABLE 'CLIENTES' ADD EDAD INT UNSIGNED;
** '''DROP''': permite eliminar un objeto. Ejemplo: DROP TABLE 'CLIENTES';
** '''TRUNCATE''': vacía todo el contenido de una tabla. Ejemplo: TRUNCATE TABLE 'ALUMNOS';

* '''Lenguaje de manipulación de datos (DML)''': son las órdenes que permite consulta y modificar los datos de la base de datos.
** '''SELECT''': permite consultar los datos, y junto con otras cláusulas filtrar estos resultados, ordenarlos, etc.
*** '''ALL/DISTINCT''': selección todos los valores o solo los distintos.
*** '''FROM''': determina la tabla a explorar. Pueden ser varias usando JOIN (requiere entonces usar WHERE).
*** '''WHERE''': indica las condiciones que deben cumplirse para que los datos sean devueltos. Pueden ser varias condiciones, combinadas con AND y OR.
*** '''GROUP BY''': indica el campo sobre el que se agruparán los datos.
*** '''HAVING''': condición que se aplicará a los datos devueltos, requiere GROUP BY.
*** '''ORDER BY''': ordena los resultados usando las columnas indicadas. El orden puede ser ASC o DESC. El predeterminado es ASC.

*** Ejemplo para recuperar todos los clientes de Madrid: SELECT nombre, dni, lugar FROM clientes WHERE lugar='Madrid' ORDER BY nombre;

** '''INSERT''': inserta un registro o varios en una tabla. El número de columnas y de valores indicados debe ser igual. Si una columna no se indica le será asignado el valor por defecto. Ejemplo: INSERT INTO 'cliente' ('nombre', 'dni', 'lugar') VALUES ('Pepe', '12345678A', 'Segovia');

*** Si se indican todos los valores no haría falta poner los nombres de las columnas. Para el ejemplo anterior suponiendo que la tabla solo tenga esos tres campos, sería: INSERT INTO 'cliente' VALUES ('Pepe', '12345678A', 'Segovia');

*** Para insertar varios registros a la vez en la misma consulta INSERT, sería separándolos con comas: INSERT INTO 'cliente' VALUES ('Pepe', '12345678A', 'Segovia'), ('Maria', '87654321Z', 'Barcelona');

** '''UPDATE''': permite modificar los valores de una tabla. Ejemplo para modificar el lugar de Pepe: UPDATE clientes SET lugar='Madrid' WHERE nombre='Pepe';

** '''DELETE''': elimina un registro o varios. No confundir con DROP que elimina la tabla entera. Ejemplo: DELETE FROM clientes WHERE dni='12345678A';

* '''Lenguaje de control de datos (DCL)''': permite controlar el acceso a los datos.
** '''GRANT''': concede permisos a uno o varios usuarios para realizar ciertas tareas (CONNECT, SELECT, INSERT, UPDATE, DELETE, USAGE).
** '''REVOKE''': elimina permisos concedidos con GRANT.

=== Procedimientos almacenados ===

Los '''procedimientos almacenados''' son programas guardados dentro de la base de datos y que son accesibles para las aplicaciones que la consultan. Su utilidad puede ser para validar datos, controlar el acceso, etc. La ventaja es que se ejecutan en el motor de la base de datos y solo devuelven los resultados solicitados, siendo más rápido todo el proceso.

=== Eventos y disparadores ===

Los '''eventos o disparadores''' (triggers) son objetos que se ejecutan cuando se realiza una operación de '''INSERT, DELETE o UPDATE''' sobre una tabla de una base de datos. Esto mejoran el mantenimiento de la base de datos ya que no requiere de intervención humana, reduciendo los errores.

Los triggers se componen de:
* '''Llamada de activación''': la sentencia que activa el trigger.
* '''Restricción''': la condición que ha de cumplirse para que se ejecute el código asociado al trigger.
* '''Acción a ejecutar''': el código en sí que se ejecuta al cumplirse la restricción o condición.

== Tema 5: Diseño y programación orientada a objetos ==

{{recuadro|1='''Diseño y programación orientada a objetos'''. Elementos y componentes software: objetos, clases, herencia, métodos, sobrecarga. Ventajas e inconvenientes. Patrones de diseño y lenguaje de modelado unificado (UML).}}

La '''programación orientada a objetos''' es...

* '''Clase''': 
* '''Objeto''': 
* '''Herencia''': 
* '''Sobrecarga''': 

Ventajas e inconvenientes

UML

== Tema 6: Arquitectura Java EE y plataforma .NET ==

{{recuadro|1='''Arquitectura Java EE y plataforma .NET''': componentes, persistencia y seguridad. Características, elementos y funciones en entornos Java, C, C++ y .Net.}}

=== Java ===

=== C ===

=== C++ ===

=== .NET ===

== Tema 7: Arquitectura de sistemas cliente/servidor ==

{{recuadro|1='''Arquitectura de sistemas cliente/servidor''' y multicapas: componentes y operación. Arquitecturas de servicios web y protocolos asociados.}}

== Tema 8: Aplicaciones web ==

{{recuadro|1='''Aplicaciones web'''. Desarrollo web front-end y en servidor. Lenguajes: HTML, XML y sus derivaciones. Navegadores y lenguajes de programación web. Lenguajes de script.}}

=== HTML ===

Un documento HTML se compone generalmente de un DOCTYPE, un elemento HTML raíz, un HEAD y un BODY. El DOCTYPE indica de qué tipo de documento se trata (versión del HTML, idioma, codificación, etc). El elemento HTML indica el comienzo del documento en sí. El HEAD permite indicar metadatos adicionales (autor, fecha, descripción, palabras clave. Y el BODY incluye todo el texto, imágenes, etc, de la página web.

En general las etiquetas se abren y cierran, aunque hay algunas como IMG que no.

Las etiquetas más frecuentes y su situación dentro del documento son las siguientes:

* '''HEAD'''

** '''BASE''': indica una URL de base para todos los HREF relativos. Solo se permite un BASE por documento.

** '''LINK''': enlaza a otros documentos, como a hojas de estilo CSS.
*** link rel="stylesheet" type="text/css" href="url" title="descripcion del estilo"

** '''META''': permite indicar metadatos como autor, fecha, descripción, palabras clave. También codificación.
*** meta charset="utf-8"
*** meta name="description" content="Una web sobre informatica"

** '''OBJECT''': para incluir objetos, aunque es raramente usado en el HEAD.

** '''SCRIPT''': para incrustar código (por ejemplo Javascript) o para enlazar a ficheros externos mediante el atributo SRC.
*** script src="enlace/a/fichero.js"

** '''STYLE''': indica los estilos del documento.
*** style type="text/css"

** '''TITLE''': define el título del documento.

*'''BODY'''

** '''P''': párrafos.
** '''H1/H6''': distintos niveles de cabecera.
** '''OL''': lista ordenada.
** '''UL''': lista sin ordenar.
** '''LI''': un elemento de una lista OL o UL.
** '''ASIDE''': contenido separado del contenido principal, por ejemplo barras laterales o anuncios.
** '''BLOCKQUOTE''': citas que pueden incluir párrafos. La cita sencilla es con Q.
** '''DIV''': un bloque bien definido que puede tener su propio estilo u otras propiedades.
** '''FIGURE''': agrupa imágenes y pies de foto.
** '''FIGCAPTION''': para pies de foto, siempre se usa dentro de FIGURE.
** '''FOOTER''': para incluir el autor o copyright.
** '''HR''': línea horizontal.
** '''NOSCRIPT''':
** '''PRE''': texto con preformateado.
** '''SCRIPT''': para incrustar código script en el documento.

** '''A''': para enlaces, ya sea dentro de propio sitio web o hacia otros sitios web. El atributo HREF indica la dirección de destino.
** '''B''': negritas. También STRONG.
** '''I''': cursivas. También EM para enfasis.
** '''S''': tachado. También STRIKE o DEL.
** '''U''': subrayado.
** '''TT''': monoespaciado.
** '''SMALL''': texto pequeño.
** '''BIG''': texto grande.
** '''SUB''': subíndice.
** '''SUP''': superíndice.
** '''FONT''': indica el tipo de fuente, color y tamaño. Mejor indicarlo con CSS.
** '''BR''': salto de línea.
** '''MARK''': sombreado amarillo para resaltar.

** '''APPLET''': para embeber un applet de Java. Se prefiere OBJECT.
** '''AUDIO''': añade un audio con reproductor.
** '''EMBED''': inserta un objeto no estándar.
** '''IMG''': para imágenes, se indica la dirección con el atributo SRC.
** '''OBJECT''': incluye un objeto indicando el tipo con TYPE. Para contenido Flash, applets Java, etc.
** '''SOURCE''': para introducir un audio o vídeo. También con VIDEO.

** '''FORM''': crea un formulario que hará lo estipulado en el atributo ACTION.
** '''BUTTON''': un botón genérico.

** '''INPUT''': elemento de entrada de datos que tiene muchos tipos.
*** '''CHECKBOX''': opción que se puede marcar o desmarcar.
*** '''RADIO''': muestra varios opciones y solo se puede escoger una.
*** '''BUTTON''': similar al botón genérico.
*** '''SUBMIT''': un botón para enviar el formulario.
*** '''IMAGE''': un botón con imagen.
*** '''RESET''': un botón para resetear el formulario a sus valores por defecto.
*** '''TEXT''': campo de texto de una línea. Con SIZE se indica el ancho visual del campo y con MAX-LENGTH el máximo de caracteres que se pueden escribir.
*** '''SEARCH''': similar a TEXT pero para búsquedas.
*** '''PASSWORD''': similar a TEXT pero oculta lo tecleado.
*** '''FILE''': para subir ficheros al servidor.
*** '''TEL''': para números de teléfono.
*** '''EMAIL''': para direcciones de email.
*** '''URL''': como TEXT pero para direcciones web.
*** '''DATE''': para escoger fecha.
*** '''TIME''': para escoger hora.
*** '''NUMBER''': como TEXT pero para números.
*** '''RANGE''': para escoger un número con una barra desplazable.
*** '''Color''': para escoger color.
*** '''HIDDEN''': no es visible en la página al ser renderizada pero sirve para almacenar datos que deban ser enviados junto al formulario.

** '''PROGRESS''': barra de progreso.
** '''TEXTAREA''': entrada de texto de múltiples líneas, indicandose el número de líneas con ROWS.

=== Javascript ===

'''JavaScript''' es un lenguaje de programación interpretado, dialecto del estándar ECMAScript. Se define como orientado a objetos, basado en prototipos, imperativo, débilmente tipado y dinámico.

* Definición de variables: var x; var y = 2; var z = "Hola";
* Impresión de errores: console.log("Error x");
* Función: function f(p) { p = p + 1; return p }
* Función anónima o lambda: function() { return ++p; }
* Bucle for: for (i=0;i<10;i++) { console.log(i); }
* Bucle while: while (i<10) { console.log(i); i++; }
* Bucle do-while: do { i+=1; console.log(i); } while (i<10);
* Switch: switch (x) { case "Hola": console.log("Hola..."); break; case "Adios": console.log("Adios..."); break; default: console.log("Nada"); }
* If-else: if (x == 1) { console.log("Uno"); } { else if (x == 2) { console.log("Dos"); } else { console.log("Otro"); }
* document.getElementById
* document.getElementsByName
* document.getElementsByClassname
* document.getElementsByTagname

=== PHP ===

'''PHP''' es un lenguaje de programación de propósito general de código del lado del servidor originalmente diseñado para el desarrollo web de contenido dinámico. El código es interpretado por un servidor web con un módulo de procesador de PHP que genera el HTML resultante.

* ?php echo "Hola"; ?>
* if ($a > $b) { echo "A es mayor"; } else { echo "B es mayor"; }
* for ($i = 1; $i <= 10; $i++) { echo $i; }

== Tema 9: Accesibilidad y usabilidad  ==

{{recuadro|1='''Accesibilidad, diseño universal y usabilidad'''. Acceso y usabilidad de las tecnologías, productos y servicios relacionados con la sociedad de la información. Confidencialidad y disponibilidad de la información en puestos de usuario final.}}

Algunas definiciones:

* '''Accesibilidad''': determina si todos los usuarios pueden utilizar una aplicación o web en igualdad de condiciones. Hay que tener en cuenta las distintas discapacidades que pueden presentar los usuarios (vista, auditivas, motrices). Por ello, algunas pautas que mejoran la accesibilidad son:
** Proporcionar un texto alterntivo a las imágenes y enlaces, lo cual facilita a los usuarios invidentes el uso de lectores de pantalla.
** Vídeos con subtítulos, permiten que los sordos puedan consumir esos contenidos.
** Tamaño de texto grande o modificable, facilita su lectura.
** Elementos de interacción como botones o campos que sean claros y bien definidos, impide confusión cuando el usuario no cuenta con precisión de movimientos.
** No limitar la interacción a un dispositivo (ratón o teclado), permite que el usuario defina su dispositivo.

* '''Diseño universal''': es aquel diseño que permite su uso al mayor número de personas posible, incuyendo por supuesto aquellas con discapacidades.

* '''Usabilidad''': es el estudio del diseño de las aplicaciones y webs para mejorar la interacción de los usuarios, haciéndola más fácil, cómoda e intuitiva.

== Tema 10: Herramientas CASE ==

{{recuadro|1='''Herramientas CASE''': características. Repositorios: estructura y actualización. Generación de código y documentación. Programas para control de versiones. Plataformas de desarrollo colaborativo de software.}}

Las '''herramientas CASE''' son aplicaciones que ayudan en las distintas fases del desarrollo de software (o ciclo de vida), reduciendo costes, errores, etc.

* Mejora la productividad y aumenta la calidad del software
* Reduce el tiempo y coste de desarrollo y mantenimiento
* Mejora la planificación de un proyecto
* Aumenta la biblioteca de conocimiento informático de una empresa ayudando a la búsqueda de soluciones para los requisitos
* Automatiza el desarrollo del software, la documentación, la generación de código, las pruebas de errores y la gestión del proyecto
* Ayuda a la reutilización del software, portabilidad y estandarización de la documentación
* Gestión global en todas las fases de desarrollo de software con una misma herramienta
* Facilita el uso de metodologías de la ingeniería del software

Las herramientas CASE se pueden clasificar según las fases en las que se apliquen:

* '''Upper CASE (U-CASE)''': para las fases de planificación, análisis de requisitos y estrategia del desarrollo. Uso de diagramas UML.
* '''Middle CASE (M-CASE)''': para las fases de análisis y diseño.
* '''Lower CASE (L-CASE)''': ayudan a generar código de forma semiautomática, detección de errores, depuración y pruebas. También generan documentación automáticamente.

=== Control de versiones ===

El '''control de versiones''' es el seguimiento de las modificaciones realizadas en un software. Se puede hacer de forma manual pero lo apropiado es usar alguna herramienta específica, llamada '''sistema de control de versiones''' que facilita la gestión de los cambios.

Los sistemas de control de versiones pueden ser:
* '''Distribuidos''': cada usuario tiene una copia del repositorio y suele existir uno donde se sincronizan los cambios entre usuarios. Ejemplo: Mercurial y Git.
* '''Centralizados''': son aquellos en los que el histórico completo se encuentra en un lugar centrar. Ejemplo: CVS y Subversion.

Algunas de estas herramientas son:

* '''Bazaar''': creado en 2007, patrocinado por Canonical.
* '''BitKeeper''': creado en 2000, tiene licencia Apache. Es de arquitectura distribuida.
* '''CSV''': es acrónimo de Concurrent Versioning System. Creado en 1986 y soportado hasta 2008. Licencia GPL. Es de arquitectura centralizada.
* '''Darcs''': creado en 2003 por David Roundy, software libre (GPL).
* '''Git''': creado en 2005 por Linus Torvalds, con licencia GPL. Es de arquitectura distribuida. Se utiliza para el núcleo Linux.
* '''Mercurial''': creado en 2005 con licencia GPL. Es de arquitectura distribuida.
* '''Subversion''': o SVN, creado en 2000 y tiene licencia Apache. Es de arquitectura centralizada.

Algunos conceptos frecuentes:

* '''Repositorio''': lugar donde se guarda el histórico con todos los cambios y que permite regresar a cualquier punto anterior.
* '''Revisión''': estado concreto del repositorio en un momento dado. Cada revisión se puede identificar con un número (es el caso de Subversion) o con un código o digest (Git usa SHA1).
* '''Rama''': o branch, supone hacer una copia del código lo que permite avanzar el desarrollo de dos formas distintas. Si más adelante se considera que los cambios de una rama son útiles, se pueden fusionar (merge) con la rama principal.
* '''Commit''': el acto de incorporar al repositorio código desarrollado en local, para que forme parte del histórico.
* '''Conflicto''': se produce cuando dos usuarios distintos modifican la misma zona del código, lo que impide que el sistema de control de versiones pueda fusionar ambos cambios de manera autónoma.
* '''Diff''': diferencia entre dos versiones distintas de un mismo fichero.
* '''Merge''': fusión de los cambios en un mismo fichero. Si el merge no es posible y da conflicto, el usuario deberá resolverlo manualmente.

=== Plataformas de desarrollo colaborativo de software ===

Existe forjas que ofrecen alojamiento de proyectos para distintos sistemas de control de versiones. Para Git existe GitHub, GitLab (anteriormente Gitorious) y GNU Savannah. Para Subversion estaba Google Code.

Entre las herramientas de seguimiento de errores (bug tracking) destacan Bugzilla (creada por Mozilla y de código abierto), Trac (libre) y JIRA (propietaria).

== Referencias ==
{{reflist}}
{{reflist-end}}

== Enlaces externos ==

{{footer}}
