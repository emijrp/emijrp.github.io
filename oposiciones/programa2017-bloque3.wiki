{{header|1=Bloque III. Desarrollo de sistemas}}

== Tema 1: Modelo conceptual de datos ==

{{recuadro|1='''Modelo conceptual de datos'''. Entidades, atributos y relaciones. Reglas de modelización. Diagramas de flujo de datos. Reglas de construcción. Descomposición en niveles. Flujogramas.}}

== Tema 2: Diseño de bases de datos ==

{{recuadro|1='''Diseño de bases de datos'''. Diseño lógico y físico. El modelo lógico relacional. Normalización.}}

== Tema 3: Lenguajes de programación ==

{{recuadro|1='''Lenguajes de programación'''. Representación de tipos de datos. Operadores. Instrucciones condicionales. Bucles y recursividad. Procedimientos, funciones y parámetros. Vectores y registros. Estructura de un programa.}}

=== Paradigmas ===

Los '''paradigmas de programación''' son formas de clasificar los lenguajes de programación en base a las características de su estructura, control de flujo y elementos. Un mismo lenguaje puede pertenecer a varios paradigmas.

* '''Imperativo''': es el más extendido. Consiste en dar instrucciones al ordenador, en forma de algoritmos, sobre cómo hacer las cosas. Ejemplos: lenguaje máquina, C, BASIC, Pascal.
** '''Orientado a objetos''': basado en el imperativo pero encapsula variables y funciones en entidades llamadas objetos. Ejemplos: C++, C#, Java, Python, Smalltalk.
** '''Procedural''': agrupa el código en funciones. Ejemplos: Fortran, ALGOL, COBOL, BASIC, C.

* '''Declarativo''': describen la lógica pero sin expresar el control de flujo. Ejemplos: Lisp, Haskell, ML, Prolog, Curry.
** '''Funcional''': se basa en el uso de funciones matemáticas en vez de en la mutación de variables (imperativa). Ejemplos: Haskell, Erlang.
** '''Lógico''': basado en la lógica formal, expresando hechos y reglas sobre el dominio del problema a resolver. Ejemplos: Prolog, Datalog.
** '''Algebraicos''': Ejemplos: Maude, SQL.

* '''Simbólico''': permite manipular sus propias fórmulas y componentes como si fueran datos. Ejemplos: Wolfram, Lisp, Prolog.

* '''Concurrente''':
* '''Distribuida''':
* '''Paralela''':

=== Estructuras ===

Una '''instrucción condicional''' es aquella que tras ser evaluada determina qué fragmento de código se ejecutará. Puede ser un '''if''' simple (solo un caso, la evaluación afirmativa), un '''if-else''' (con código tanto para la evaluación afirmativa como negativa de la condición) o un '''switch/select-case''' (múltiples casos).

Un '''bucle''' es una sentencia que ejecuta repetidas veces un trozo de código, hasta que la condición asignada a dicho bucle deja de cumplirse. Los tres bucles más utilizados en programación son el bucle '''while''', el bucle '''for''' y el bucle '''do-while'''.

Un '''algoritmo recursivo''' es un algoritmo que expresa la solución de un problema en términos de una llamada a sí mismo. La llamada a sí mismo se conoce como llamada recursiva o recurrente.

Un '''procedimiento''' es una subrutina dentro de un programa que resuelve una tarea específica. Una '''función''' es aquella subrutina que devuelve un valor. Los '''parámetros''' son aquellas variables que se le pasan a los procedimientos o funciones para que sean utilizados en la resolución de la tarea.

=== Lenguajes ===

Algunos '''lenguajes de programación''' y una breve reseña sobre ellos. Algunos no son estrictamente lenguajes de programación (como HTML, CSS, XML) pero se incluyen por ser de interés:

* '''ALGOL''': familia de lenguajes imperativos cuya primera versión ALGOL 58 apareció en 1958. Fue el que más influyó a lenguajes posteriores en cuanto a sintaxis de entre sus contemporáneos de alto nivel (FORTRAN, Lisp y COBOL).
* '''AWK''': lenguaje para procesado de texto y extracción de datos. Creado en Bell Labs en los años 70.
* '''Batch''': un script batch es un fichero en texto plano que incluye comandos para ser ejecutados por el intérprete de comandos. Su extensión suele ser .bat, .cmd o .btm.
* '''Bash''': escrito por Brian Fox para el Proyecto GNU. Primera versión en 1989.
* '''BASIC''': familia de lenguajes de alto nivel y de propósito general con la finalidad de ser fáciles de usar. Primera versión en 1964.
* '''C''': lenguaje imperativo de propósito general, estructurado y con capacidad de recursión, de tipado estático. Desarrollado por Dennis Ritchie en los Laboratorios Bell entre 1969 y 1972. Proviene del lenguaje B.
* '''C++''': imperativo, orientado a objetos, de propósito general. Creado por Bjarne Stroustrup en 1985.
* '''C#''': lenguaje multiparadigma, desarrollado por Microsoft en 2000.
* '''COBOL''': lenguaje imperativo y procedural. Enfocado a finanzas y negocios. Creado en 1959.
* '''CSS''': lenguaje de hojas de estilo para describir cómo se presenta un documento escrito en un lenguaje de marcado. Aunque en su mayoría se utiliza para el diseño de páginas web HTML/XHTML, también sirve para documentos XML, SVG y XUL.
* '''Eiffel''': lenguaje orientado a objetos, diseñado por Bertrand Meyer, publicado en 1986. Conceptos introducidos por Eiffel fueron incorporados más tarde a Java y C#.
* '''Erlang''': lenguaje de propósito general concurrente y funcional, con recolector de basura. Diseñado en 1986 por Ericsson, liberado en 1998.
* '''Ensamblador''': lenguaje de bajo nivel, imperativo, no estructurado. Específico de cada arquitectura de computador. El código ensamblador se convierte en ejecutable con un programa llamado a su vez ensamblador. 
* '''FORTRAN''': lenguaje de propósito general, imperativo, enfocado a computación numérica y científica. Desarrollado originalmente por IBM en los años 50. Significa Formula Translation.
* '''Go''': lenguaje imperativo, concurrente, compilado, creado por Google en 2009.
* '''Haskell''': lenguaje de propósito general, funcional, con tipado fuerte.
* '''HTML''': lenguaje de marcado para crear páginas web y aplicaciones web. Junto con CSS y Javascript suponen los tres lenguajes básicos de la World Wide Web. Los navegadores web reciben los documentos HTML desde un servidor web o almacenados localmente y los renderizan. El HTML permite embeber programas escritos en Javascript o a través de applets.
* '''Java''': lenguaje de propósito general, concurrente, orientado a objetos, diseñado para ser compilado una sola vez (bytecode) y ejecutado en cualquier plataforma que soporte la máquina Java. Empleado mayoritariamente para aplicaciones cliente-servidor. Creado por James Gosling en 1995 en Sun Microsystems (luego adquirida por Oracle). Sintaxis derivada de C y C++.
* '''JavaScript''': lenguaje de alto nivel, interpretado, multiparadigma, de tipado débil. Se utiliza para hacer dinámicas las páginas web, aunque ahora también se utiliza para aplicaciones de escritorio, en software PDF, procesadores de texto, etc.
* '''KML''': Keyhole Markup Language, notación XML para expresar información geográfica para ser visualizada en mapas y 3D en navegadores.
* '''LaTeX''': lenguaje de marcado para la redacción de documentos. Creado en 1985 por Leslie Lamport. Permite definir la estructura del documento, el estilo del texto, añadir citas y referencias, etc.
* '''Lisp''': lenguaje funcional, procedural, creado en 1958. Es el segundo lenguaje de alto nivel más antiguo, por detrás de FORTRAN. Existen varios dialectos, entre ellos Common Lisp y Scheme. Utilizado en inteligencia artificial.
* '''Lua''': imperativo, estructurado y bastante ligero que fue diseñado como un lenguaje interpretado con una semántica extendible.
* '''make''': lenguaje para compilar y enlazar código fuente, generando código objeto.
* '''Modula''': descendiente de Pascal, creado por el autor de éste. Soporta módulos.
* '''Occam''': lenguaje concurrente, imperativo.
* '''Pascal''': lenguaje imperativo y procedural, diseñado por Niklaus Wirth y publicado en 1970. Creado para fomentar buenas prácticas de programación mediante el uso de programación estructurada y estructuras de datos. Existe el Object Pascal orientado a objetos.
* '''Perl''': lenguaje de alto nivel, propósito general, interpretado.
* '''PHP''': lenguaje del lado del servidor para desarrollo web y propósito general. Creado por Rasmus Lerdof en 1994. Puede embeberse dentro del HTML.
* '''Prolog''': lenguaje lógico de propósito general, enfocado a la inteligencia artificial y lingüística computacional. Creado en los años 70 por Alain Colmerauer.
* '''Python''': lenguaje interpretado, multiparadigma, de alto nivel y propósito general. Creado por Guido van Rossum en 1990. Con tipos dinámicos y control de memoria automático.
* '''R''': lenguaje para estadística y gráficas. Creado en 1993.
* '''Ruby''': lenguaje orientado a objetos, de propósito general, multiparadigma. Creado por Yukihiro Matsumoto en 1995.
* '''Scala''': lenguaje de propósito general, funcional, diseñado para corregir algunas críticas de Java. Creado en 2004 por Martin Odersky.
* '''Smalltalk''': lenguaje orientado a objetos, creado en parte con fines educativos por programadores de Xrox PARC en los años 70.
* '''SVG''': Scalable Vector Graphics es un formato gráfico basado en XML con soporte para animación.
* '''Visual Basic''': lenguaje dirigido por eventos, publicado en 1991 por Microsoft. Derivado de BASIC, permite crear aplicaciones con interfaz gráfica rápidamente.
* '''Visual Basic .NET''': lenguaje orientado a objetos, multiparadigma, lanzado en 2002 por Microsoft. Sucesor de Visual Basic.
* '''XML''': Extensible Markup Language, lenguaje de marcado para definir reglas para codificar documentos en un formato que sea entendible por humanos y máquinas.
* '''XUL''': XML User Interface Language es un lenguage de marcas para interfaces de usuario desarrollado por Mozilla. Permite crear interfaces gráficas de usuario de forma similar a una página web.

== Tema 4: Lenguajes de interrogación de bases de datos ==

{{recuadro|1='''Lenguajes de interrogación de bases de datos'''. Estándar ANSI SQL. Procedimientos almacenados. Eventos y disparadores.}}

== Tema 5: Diseño y programación orientada a objetos ==

{{recuadro|1='''Diseño y programación orientada a objetos'''. Elementos y componentes software: objetos, clases, herencia, métodos, sobrecarga. Ventajas e inconvenientes. Patrones de diseño y lenguaje de modelado unificado (UML).}}

== Tema 6: Arquitectura Java EE y plataforma .NET ==

{{recuadro|1='''Arquitectura Java EE y plataforma .NET''': componentes, persistencia y seguridad. Características, elementos y funciones en entornos Java, C, C++ y .Net.}}

== Tema 7: Arquitectura de sistemas cliente/servidor ==

{{recuadro|1='''Arquitectura de sistemas cliente/servidor''' y multicapas: componentes y operación. Arquitecturas de servicios web y protocolos asociados.}}

== Tema 8: Aplicaciones web ==

{{recuadro|1='''Aplicaciones web'''. Desarrollo web front-end y en servidor. Lenguajes: HTML, XML y sus derivaciones. Navegadores y lenguajes de programación web. Lenguajes de script.}}

== Tema 9: Accesibilidad y usabilidad  ==

{{recuadro|1='''Accesibilidad, diseño universal y usabilidad'''. Acceso y usabilidad de las tecnologías, productos y servicios relacionados con la sociedad de la información. Confidencialidad y disponibilidad de la información en puestos de usuario final.}}

== Tema 10: Herramientas CASE ==

{{recuadro|1='''Herramientas CASE''': características. Repositorios: estructura y actualización. Generación de código y documentación. Programas para control de versiones. Plataformas de desarrollo colaborativo de software.}}

=== Control de versiones ===

* Git
* Mercurial
* Subversion

== Referencias ==
{{reflist}}
{{reflist-end}}

== Enlaces externos ==

{{footer}}
